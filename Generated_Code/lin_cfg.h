/** ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**
**     @file      lin_cfg.h
**
**     @date      14:19:28, 2022-1-13
**
**     @brief     Hardware configuration file
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016 - 2017 NXP
**     All Rights Reserved.
**
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/

/*!
 * @file lin_cfg.h
 *
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.3, A project should not contain unused type declarations.
 * The type can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, A project should not contain unused macro declarations.
 * The macro can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.1, External identifiers shall be distinct.
 * The identifiers are generated from signal names. The signal name is defined by users and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.2, Identifiers declared in the same scope and name
 * space shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.4, Macro identifiers shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.5, Identifier shall be distinct from macro names.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Directive 4.9, A function should be used in preference
 * to a function-like macro where they are interchangeable.
 * The macro is used to define static or dynamic implementation of API functions.
 * This way is more efficient.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 20.10, The #/ ## preprocessor operator should not be used.
 * The operator is used to define dynamic implementation of API functions of signal interaction.
 * This way is more efficient.
 */
#ifndef    LIN_CFG_H
#define    LIN_CFG_H

#include <stdint.h>
#include "lin_driver.h"
#include "lin1.h"

/* Implements    : SUPPORT_MASTER_MODE_Class */
#define SUPPORT_MASTER_MODE     1U /* Equal to 1 when have at least one master interface */
/* Implements    : SUPPORT_SLAVE_MODE_Class */
#define SUPPORT_SLAVE_MODE      0U  /* Equal to 1 when have at least one slave interface */

/* Implements    : SUPPORT_PROTOCOL_21_Class */
#define SUPPORT_PROTOCOL_21     1U /* Equal to 1 when have at least one LIN2.1 or LIN2.2 interface */
/* Implements    : SUPPORT_PROTOCOL_J2602_Class */
#define SUPPORT_PROTOCOL_J2602  0U /* Equal to 1 when have at least one J2602 interface */

/* Implements    : SUPPORT_DIAG_CLASS_III_Class */
#define SUPPORT_DIAG_CLASS_III  0U /* Equal to 1 when have at least one ifc with diagnostic class III */
/* Implements    : SUPPORT_DIAG_CLASS_II_Class */
#define SUPPORT_DIAG_CLASS_II   0U /* Equal to 1 when have at least one ifc with diagnostic class II or III */

/* Implements    : SUPPORT_TRANSPORT_LAYER_Class */
#define SUPPORT_TRANSPORT_LAYER 0U /* Equal to 1 to use transport layer */
/* Implements    : SUPPORT_DIAG_SERVICE_Class */
#define SUPPORT_DIAG_SERVICE    0U /* Equal to 1 to use diagnostic service layer */
#define TIME_OUT_UNIT_US 500U

#define HARDWARE_INSTANCE_COUNT    3U

#define LIN_NUM_OF_IFCS  1U
#define LIN_NUM_OF_SLAVE_IFCS 0U
#define LIN_NUM_OF_MASTER_IFCS 1U

/* frame buffer size */
#define LIN_FRAME_BUF_SIZE          96U
#define LIN_FLAG_BUF_SIZE           18U

/**********************************************************************/
/***************               Interfaces           *******************/
/**********************************************************************/
typedef enum {
   LI0 = 0x00U,
   INVALID_IFC = 0xFFU
}l_ifc_handle;

typedef enum {
   INVALID_SLAVE_INDEX = 0xFFU
}l_ifc_slave_handle;
typedef enum {
   LI0_Master = 0x00U,
   INVALID_MASTER_INDEX = 0xFFU
}l_ifc_master_handle;

/**********************************************************************/
/***************               Signals              *******************/
/**********************************************************************/
/* Number of signals */
#define LIN_NUM_OF_SIGS  70U
/* List of signals */
typedef enum {

   /* Interface_name = LI0 */

   LI0_BDC_1_ReqMovePos

   , LI0_BDC_1_RespPos
  
   , LI0_BDC_1_MotorStatus
  
   , LI0_BDC_1_TempWarn
  
   , LI0_BDC_1_MoveEnable
  
   , LI0_BDC_1_voltageErr
  
   , LI0_BDC_1_Fault_Signal
  
   , LI0_BDC_1_Rsp_Comm_Err
  
   , LI0_BDC_2_ReqMovePos
  
   , LI0_BDC_2_RespPos
  
   , LI0_BDC_2_MotorStatus
  
   , LI0_BDC_2_TempWarn
  
   , LI0_BDC_2_MoveEnable
  
   , LI0_BDC_2_voltageErr
  
   , LI0_BDC_2_Fault_Signal
  
   , LI0_BDC_2_Rsp_Comm_Err
  
   , LI0_CCV4_ReqMovePos
  
   , LI0_CCV4_RespPos
  
   , LI0_CCV4_MotorStatus
  
   , LI0_CCV4_TempWarn
  
   , LI0_CCV4_MoveEnable
  
   , LI0_CCV4_voltageErr
  
   , LI0_CCV4_Fault_Signal
  
   , LI0_CCV4_Rsp_Comm_Err
  
   , LI0_PositionRequest_EXV2
  
   , LI0_EnableRequest_EXV2
  
   , LI0_InitRequest_EXV2
  
   , LI0_ResponseError_EXV2
  
   , LI0_CurrentInitState_EXV2
  
   , LI0_RunState_EXV2
  
   , LI0_FaultState_EXV2
  
   , LI0_VoltageState_EXV2
  
   , LI0_TemperatureWarn_EXV2
  
   , LI0_CurrentPosition_EXV2
  
   , LI0_TMM_EXV_PositionRequest
  
   , LI0_TMM_EXV_EnableRequest
  
   , LI0_TMM_EXV_initRequest
  
   , LI0_EXV_ResponseError
  
   , LI0_EXV_CurrentInitState
  
   , LI0_EXV_RunState
  
   , LI0_EXV_FaultState
  
   , LI0_EXV_VoltageState
  
   , LI0_EXV_TemperatureWarn
  
   , LI0_EXV_CurrentPosition
  
   , LI0_ECM_TargetPosReqIgOn_A
  
   , LI0_ECM_CalibReq_A
  
   , LI0_ECM_IgStatusReq_A
  
   , LI0_ECM_TargetPosReqIgOff_A
  
   , LI0_AGM_A_ActualPosition
  
   , LI0_AGM_A_Err_MechBreak
  
   , LI0_AGM_A_Err_MechBlock
  
   , LI0_AGM_A_CalibActive
  
   , LI0_AGM_A_CalibRequired
  
   , LI0_AGM_A_Err_Electrical
  
   , LI0_AGM_A_Err_OverTemp
  
   , LI0_AGM_A_Err_Voltage
  
   , LI0_AGM_A_Err_LINResp
  
   , LI0_ECM_TargetPosReqIgOn_B
  
   , LI0_ECM_CalibReq_B
  
   , LI0_ECM_IgStatusReq_B
  
   , LI0_ECM_TargetPosReqIgOff_B
  
   , LI0_AGM_B_ActualPosition
  
   , LI0_AGM_B_Err_MechBreak
  
   , LI0_AGM_B_Err_MechBlock
  
   , LI0_AGM_B_CalibActive
  
   , LI0_AGM_B_CalibRequired
  
   , LI0_AGM_B_Err_Electrical
  
   , LI0_AGM_B_Err_OverTemp
  
   , LI0_AGM_B_Err_Voltage
  
   , LI0_AGM_B_Err_LINResp
  
} l_signal_handle;
/**********************************************************************/
/*****************               Frame             ********************/
/**********************************************************************/
/* Number of frames */
#define LIN_NUM_OF_FRMS  16U
/* List of frames */
typedef enum {
/* All frames for master node */

   /* Interface_name = LI0 */

   LI0_BDC_1_Cmd

   , LI0_BDC_1_Rsp
  
   , LI0_BDC_2_Cmd
  
   , LI0_BDC_2_Rsp
  
   , LI0_CCV4_Cmd
  
   , LI0_CCV4_Rsq
  
   , LI0_ATC_4
  
   , LI0_EXV_2
  
   , LI0_VCU_EXV
  
   , LI0_EXV_VCU
  
   , LI0_ECM_AGM_A_DEMAND
  
   , LI0_AGM_A_ECM_STATUS
  
   , LI0_ECM_AGM_B_DEMAND
  
   , LI0_AGM_B_ECM_STATUS
  
   , LI0_MasterReq
  
   , LI0_SlaveResp
  
} l_frame_handle;
/**********************************************************************/
/***************        schedule table       *******************/
/**********************************************************************/
/* Number of schedule tables */
#define  LIN_NUM_OF_SCHD_TBL   5U
/* List of schedules */
typedef enum {

   /* Interface_name = LI0 */

   LI0_LIN_NULL_SCHEDULE

   ,LI0_GOTO_SLEEP_SCHEDULE
   
   ,LI0_MasterReqTable
   
   ,LI0_SlaveRespTable
   
   ,LI0_NormalTable
   
}l_schedule_handle;
/**********************************************************************/
/***************             Configuration          *******************/
/**********************************************************************/


/* Size of configuration in ROM and RAM used for interface: LI0 */
#define LI0_LIN_SIZE_OF_CFG  18U



/*********************************************************************
 * global macros
 *********************************************************************/
/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_rd
 * Description   : This function return value of bool signal
 *
 * Implements    : l_bool_rd_Class
 *END**************************************************************************/
#define l_bool_rd(SIGNAL) l_bool_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_wr
 * Description   : This function write value A to bool signal
 *
 * Implements    : l_bool_wr_Class
 *END**************************************************************************/
#define l_bool_wr(SIGNAL, A) l_bool_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_rd
 * Description   : This function read data from (1-8 bit)signal
 *
 * Implements    : l_u8_rd_Class
 *END**************************************************************************/
#define l_u8_rd(SIGNAL) l_u8_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_wr
 * Description   : This this function write data to (1-8 bit)signal
 *
 * Implements    : l_u8_wr_Class
 *END**************************************************************************/
#define l_u8_wr(SIGNAL, A) l_u8_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_rd
 * Description   : This function read data from (8-16 bit)signal
 *
 * Implements    : l_u16_rd_Class
 *END**************************************************************************/
#define l_u16_rd(SIGNAL) l_u16_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_wr
 * Description   : This function write data to (8-16 bit) signal
 *
 * Implements    : l_u16_wr_Class
 *END**************************************************************************/
#define l_u16_wr(SIGNAL, A) l_u16_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_rd
 * Description   : This function read data from bytes signal
 *
 * Implements    : l_bytes_rd_Class
 *END**************************************************************************/
#define l_bytes_rd(SIGNAL, start, count, data)  l_bytes_rd_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_wr
 * Description   : This function write data to bytes signal
 *
 * Implements    : l_bytes_wr_Class
 *END**************************************************************************/
#define l_bytes_wr(SIGNAL, start, count, data) l_bytes_wr_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_tst
 * Description   : This function return value of flag which related with signal
 *
 * Implements    : l_flg_tst_Class
 *END**************************************************************************/
#define l_flg_tst(FLAG) l_flg_tst_##FLAG()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_clr
 * Description   : This function clear flag which related with signal
 *
 * Implements    : l_flg_clr_Class
 *END**************************************************************************/
#define l_flg_clr(FLAG) l_flg_clr_##FLAG()

#define LIN_TEST_BIT(A,B) ((l_bool)((((A) & (1U << (B))) != 0U) ? 1U : 0U))
#define LIN_SET_BIT(A,B)                      ((A) |= (l_u8) (1U << (B)))
#define LIN_CLEAR_BIT(A,B)               ((A) &= ((l_u8) (~(1U << (B)))))
#define LIN_BYTE_MASK  ((l_u16)(((l_u16)((l_u16)1 << CHAR_BIT)) - (l_u16)1))


/* Returns the low byte of the 32-bit value    */
#define BYTE_0(n)                              ((l_u8)((n) & (l_u8)0xFF))
/* Returns the second byte of the 32-bit value */
#define BYTE_1(n)                        ((l_u8)(BYTE_0((n) >> (l_u8)8)))
/* Returns the third byte of the 32-bit value  */
#define BYTE_2(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)16)))
/* Returns high byte of the 32-bit value       */
#define BYTE_3(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)24)))

/*
 * defines for signal access
 */



#define LIN_LI0_BDC_1_ReqMovePos_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_ReqMovePos_BIT_OFFSET    0U
#define LIN_LI0_BDC_1_ReqMovePos_SIGNAL_SIZE    8U
#define LIN_LI0_BDC_1_ReqMovePos_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_BDC_1_ReqMovePos_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BDC_1_RespPos_BYTE_OFFSET    10U
#define LIN_LI0_BDC_1_RespPos_BIT_OFFSET    0U
#define LIN_LI0_BDC_1_RespPos_SIGNAL_SIZE    8U
#define LIN_LI0_BDC_1_RespPos_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_RespPos_FLAG_BIT_OFFSET    5U


#define LIN_LI0_BDC_1_MotorStatus_BYTE_OFFSET    9U
#define LIN_LI0_BDC_1_MotorStatus_BIT_OFFSET    7U
#define LIN_LI0_BDC_1_MotorStatus_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_1_MotorStatus_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_MotorStatus_FLAG_BIT_OFFSET    4U


#define LIN_LI0_BDC_1_TempWarn_BYTE_OFFSET    9U
#define LIN_LI0_BDC_1_TempWarn_BIT_OFFSET    6U
#define LIN_LI0_BDC_1_TempWarn_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_1_TempWarn_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_TempWarn_FLAG_BIT_OFFSET    3U


#define LIN_LI0_BDC_1_MoveEnable_BYTE_OFFSET    0U
#define LIN_LI0_BDC_1_MoveEnable_BIT_OFFSET    0U
#define LIN_LI0_BDC_1_MoveEnable_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_1_MoveEnable_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_BDC_1_MoveEnable_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BDC_1_voltageErr_BYTE_OFFSET    9U
#define LIN_LI0_BDC_1_voltageErr_BIT_OFFSET    4U
#define LIN_LI0_BDC_1_voltageErr_SIGNAL_SIZE    2U
#define LIN_LI0_BDC_1_voltageErr_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_voltageErr_FLAG_BIT_OFFSET    2U


#define LIN_LI0_BDC_1_Fault_Signal_BYTE_OFFSET    8U
#define LIN_LI0_BDC_1_Fault_Signal_BIT_OFFSET    2U
#define LIN_LI0_BDC_1_Fault_Signal_SIGNAL_SIZE    4U
#define LIN_LI0_BDC_1_Fault_Signal_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_Fault_Signal_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BDC_1_Rsp_Comm_Err_BYTE_OFFSET    8U
#define LIN_LI0_BDC_1_Rsp_Comm_Err_BIT_OFFSET    0U
#define LIN_LI0_BDC_1_Rsp_Comm_Err_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BDC_2_ReqMovePos_BYTE_OFFSET    17U
#define LIN_LI0_BDC_2_ReqMovePos_BIT_OFFSET    0U
#define LIN_LI0_BDC_2_ReqMovePos_SIGNAL_SIZE    8U
#define LIN_LI0_BDC_2_ReqMovePos_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_BDC_2_ReqMovePos_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BDC_2_RespPos_BYTE_OFFSET    26U
#define LIN_LI0_BDC_2_RespPos_BIT_OFFSET    0U
#define LIN_LI0_BDC_2_RespPos_SIGNAL_SIZE    8U
#define LIN_LI0_BDC_2_RespPos_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_BDC_2_RespPos_FLAG_BIT_OFFSET    5U


#define LIN_LI0_BDC_2_MotorStatus_BYTE_OFFSET    25U
#define LIN_LI0_BDC_2_MotorStatus_BIT_OFFSET    7U
#define LIN_LI0_BDC_2_MotorStatus_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_2_MotorStatus_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_BDC_2_MotorStatus_FLAG_BIT_OFFSET    4U


#define LIN_LI0_BDC_2_TempWarn_BYTE_OFFSET    25U
#define LIN_LI0_BDC_2_TempWarn_BIT_OFFSET    6U
#define LIN_LI0_BDC_2_TempWarn_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_2_TempWarn_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_BDC_2_TempWarn_FLAG_BIT_OFFSET    3U


#define LIN_LI0_BDC_2_MoveEnable_BYTE_OFFSET    16U
#define LIN_LI0_BDC_2_MoveEnable_BIT_OFFSET    0U
#define LIN_LI0_BDC_2_MoveEnable_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_2_MoveEnable_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_BDC_2_MoveEnable_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BDC_2_voltageErr_BYTE_OFFSET    25U
#define LIN_LI0_BDC_2_voltageErr_BIT_OFFSET    4U
#define LIN_LI0_BDC_2_voltageErr_SIGNAL_SIZE    2U
#define LIN_LI0_BDC_2_voltageErr_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_BDC_2_voltageErr_FLAG_BIT_OFFSET    2U


#define LIN_LI0_BDC_2_Fault_Signal_BYTE_OFFSET    24U
#define LIN_LI0_BDC_2_Fault_Signal_BIT_OFFSET    2U
#define LIN_LI0_BDC_2_Fault_Signal_SIGNAL_SIZE    4U
#define LIN_LI0_BDC_2_Fault_Signal_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_BDC_2_Fault_Signal_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BDC_2_Rsp_Comm_Err_BYTE_OFFSET    24U
#define LIN_LI0_BDC_2_Rsp_Comm_Err_BIT_OFFSET    0U
#define LIN_LI0_BDC_2_Rsp_Comm_Err_SIGNAL_SIZE    1U
#define LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BIT_OFFSET    0U


#define LIN_LI0_CCV4_ReqMovePos_BYTE_OFFSET    32U
#define LIN_LI0_CCV4_ReqMovePos_BIT_OFFSET    1U
#define LIN_LI0_CCV4_ReqMovePos_SIGNAL_SIZE    1U
#define LIN_LI0_CCV4_ReqMovePos_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_CCV4_ReqMovePos_FLAG_BIT_OFFSET    1U


#define LIN_LI0_CCV4_RespPos_BYTE_OFFSET    40U
#define LIN_LI0_CCV4_RespPos_BIT_OFFSET    6U
#define LIN_LI0_CCV4_RespPos_SIGNAL_SIZE    2U
#define LIN_LI0_CCV4_RespPos_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CCV4_RespPos_FLAG_BIT_OFFSET    2U


#define LIN_LI0_CCV4_MotorStatus_BYTE_OFFSET    41U
#define LIN_LI0_CCV4_MotorStatus_BIT_OFFSET    7U
#define LIN_LI0_CCV4_MotorStatus_SIGNAL_SIZE    1U
#define LIN_LI0_CCV4_MotorStatus_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CCV4_MotorStatus_FLAG_BIT_OFFSET    5U


#define LIN_LI0_CCV4_TempWarn_BYTE_OFFSET    41U
#define LIN_LI0_CCV4_TempWarn_BIT_OFFSET    6U
#define LIN_LI0_CCV4_TempWarn_SIGNAL_SIZE    1U
#define LIN_LI0_CCV4_TempWarn_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CCV4_TempWarn_FLAG_BIT_OFFSET    4U


#define LIN_LI0_CCV4_MoveEnable_BYTE_OFFSET    32U
#define LIN_LI0_CCV4_MoveEnable_BIT_OFFSET    0U
#define LIN_LI0_CCV4_MoveEnable_SIGNAL_SIZE    1U
#define LIN_LI0_CCV4_MoveEnable_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_CCV4_MoveEnable_FLAG_BIT_OFFSET    0U


#define LIN_LI0_CCV4_voltageErr_BYTE_OFFSET    41U
#define LIN_LI0_CCV4_voltageErr_BIT_OFFSET    4U
#define LIN_LI0_CCV4_voltageErr_SIGNAL_SIZE    2U
#define LIN_LI0_CCV4_voltageErr_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CCV4_voltageErr_FLAG_BIT_OFFSET    3U


#define LIN_LI0_CCV4_Fault_Signal_BYTE_OFFSET    40U
#define LIN_LI0_CCV4_Fault_Signal_BIT_OFFSET    2U
#define LIN_LI0_CCV4_Fault_Signal_SIGNAL_SIZE    4U
#define LIN_LI0_CCV4_Fault_Signal_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CCV4_Fault_Signal_FLAG_BIT_OFFSET    1U


#define LIN_LI0_CCV4_Rsp_Comm_Err_BYTE_OFFSET    40U
#define LIN_LI0_CCV4_Rsp_Comm_Err_BIT_OFFSET    0U
#define LIN_LI0_CCV4_Rsp_Comm_Err_SIGNAL_SIZE    1U
#define LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET    48U
#define LIN_LI0_PositionRequest_EXV2_BIT_OFFSET    0U
#define LIN_LI0_PositionRequest_EXV2_SIGNAL_SIZE    16U
#define LIN_LI0_PositionRequest_EXV2_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_PositionRequest_EXV2_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EnableRequest_EXV2_BYTE_OFFSET    50U
#define LIN_LI0_EnableRequest_EXV2_BIT_OFFSET    0U
#define LIN_LI0_EnableRequest_EXV2_SIGNAL_SIZE    1U
#define LIN_LI0_EnableRequest_EXV2_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EnableRequest_EXV2_FLAG_BIT_OFFSET    1U


#define LIN_LI0_InitRequest_EXV2_BYTE_OFFSET    51U
#define LIN_LI0_InitRequest_EXV2_BIT_OFFSET    0U
#define LIN_LI0_InitRequest_EXV2_SIGNAL_SIZE    3U
#define LIN_LI0_InitRequest_EXV2_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_InitRequest_EXV2_FLAG_BIT_OFFSET    2U


#define LIN_LI0_ResponseError_EXV2_BYTE_OFFSET    56U
#define LIN_LI0_ResponseError_EXV2_BIT_OFFSET    0U
#define LIN_LI0_ResponseError_EXV2_SIGNAL_SIZE    1U
#define LIN_LI0_ResponseError_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_ResponseError_EXV2_FLAG_BIT_OFFSET    0U


#define LIN_LI0_CurrentInitState_EXV2_BYTE_OFFSET    56U
#define LIN_LI0_CurrentInitState_EXV2_BIT_OFFSET    1U
#define LIN_LI0_CurrentInitState_EXV2_SIGNAL_SIZE    2U
#define LIN_LI0_CurrentInitState_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_CurrentInitState_EXV2_FLAG_BIT_OFFSET    1U


#define LIN_LI0_RunState_EXV2_BYTE_OFFSET    56U
#define LIN_LI0_RunState_EXV2_BIT_OFFSET    3U
#define LIN_LI0_RunState_EXV2_SIGNAL_SIZE    1U
#define LIN_LI0_RunState_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_RunState_EXV2_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FaultState_EXV2_BYTE_OFFSET    56U
#define LIN_LI0_FaultState_EXV2_BIT_OFFSET    4U
#define LIN_LI0_FaultState_EXV2_SIGNAL_SIZE    4U
#define LIN_LI0_FaultState_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FaultState_EXV2_FLAG_BIT_OFFSET    3U


#define LIN_LI0_VoltageState_EXV2_BYTE_OFFSET    57U
#define LIN_LI0_VoltageState_EXV2_BIT_OFFSET    0U
#define LIN_LI0_VoltageState_EXV2_SIGNAL_SIZE    2U
#define LIN_LI0_VoltageState_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_VoltageState_EXV2_FLAG_BIT_OFFSET    4U


#define LIN_LI0_TemperatureWarn_EXV2_BYTE_OFFSET    57U
#define LIN_LI0_TemperatureWarn_EXV2_BIT_OFFSET    2U
#define LIN_LI0_TemperatureWarn_EXV2_SIGNAL_SIZE    2U
#define LIN_LI0_TemperatureWarn_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_TemperatureWarn_EXV2_FLAG_BIT_OFFSET    5U


#define LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET    58U
#define LIN_LI0_CurrentPosition_EXV2_BIT_OFFSET    0U
#define LIN_LI0_CurrentPosition_EXV2_SIGNAL_SIZE    16U
#define LIN_LI0_CurrentPosition_EXV2_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_CurrentPosition_EXV2_FLAG_BIT_OFFSET    6U


#define LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET    64U
#define LIN_LI0_TMM_EXV_PositionRequest_BIT_OFFSET    0U
#define LIN_LI0_TMM_EXV_PositionRequest_SIGNAL_SIZE    16U
#define LIN_LI0_TMM_EXV_PositionRequest_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_TMM_EXV_PositionRequest_FLAG_BIT_OFFSET    0U


#define LIN_LI0_TMM_EXV_EnableRequest_BYTE_OFFSET    66U
#define LIN_LI0_TMM_EXV_EnableRequest_BIT_OFFSET    0U
#define LIN_LI0_TMM_EXV_EnableRequest_SIGNAL_SIZE    1U
#define LIN_LI0_TMM_EXV_EnableRequest_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_TMM_EXV_EnableRequest_FLAG_BIT_OFFSET    1U


#define LIN_LI0_TMM_EXV_initRequest_BYTE_OFFSET    67U
#define LIN_LI0_TMM_EXV_initRequest_BIT_OFFSET    0U
#define LIN_LI0_TMM_EXV_initRequest_SIGNAL_SIZE    3U
#define LIN_LI0_TMM_EXV_initRequest_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_TMM_EXV_initRequest_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EXV_ResponseError_BYTE_OFFSET    72U
#define LIN_LI0_EXV_ResponseError_BIT_OFFSET    0U
#define LIN_LI0_EXV_ResponseError_SIGNAL_SIZE    1U
#define LIN_LI0_EXV_ResponseError_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_ResponseError_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV_CurrentInitState_BYTE_OFFSET    72U
#define LIN_LI0_EXV_CurrentInitState_BIT_OFFSET    1U
#define LIN_LI0_EXV_CurrentInitState_SIGNAL_SIZE    2U
#define LIN_LI0_EXV_CurrentInitState_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_CurrentInitState_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV_RunState_BYTE_OFFSET    72U
#define LIN_LI0_EXV_RunState_BIT_OFFSET    3U
#define LIN_LI0_EXV_RunState_SIGNAL_SIZE    1U
#define LIN_LI0_EXV_RunState_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_RunState_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EXV_FaultState_BYTE_OFFSET    72U
#define LIN_LI0_EXV_FaultState_BIT_OFFSET    4U
#define LIN_LI0_EXV_FaultState_SIGNAL_SIZE    4U
#define LIN_LI0_EXV_FaultState_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_FaultState_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EXV_VoltageState_BYTE_OFFSET    73U
#define LIN_LI0_EXV_VoltageState_BIT_OFFSET    0U
#define LIN_LI0_EXV_VoltageState_SIGNAL_SIZE    2U
#define LIN_LI0_EXV_VoltageState_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_VoltageState_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EXV_TemperatureWarn_BYTE_OFFSET    73U
#define LIN_LI0_EXV_TemperatureWarn_BIT_OFFSET    2U
#define LIN_LI0_EXV_TemperatureWarn_SIGNAL_SIZE    2U
#define LIN_LI0_EXV_TemperatureWarn_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_TemperatureWarn_FLAG_BIT_OFFSET    5U


#define LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET    74U
#define LIN_LI0_EXV_CurrentPosition_BIT_OFFSET    0U
#define LIN_LI0_EXV_CurrentPosition_SIGNAL_SIZE    16U
#define LIN_LI0_EXV_CurrentPosition_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_EXV_CurrentPosition_FLAG_BIT_OFFSET    6U


#define LIN_LI0_ECM_TargetPosReqIgOn_A_BYTE_OFFSET    80U
#define LIN_LI0_ECM_TargetPosReqIgOn_A_BIT_OFFSET    0U
#define LIN_LI0_ECM_TargetPosReqIgOn_A_SIGNAL_SIZE    8U
#define LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BIT_OFFSET    0U


#define LIN_LI0_ECM_CalibReq_A_BYTE_OFFSET    81U
#define LIN_LI0_ECM_CalibReq_A_BIT_OFFSET    0U
#define LIN_LI0_ECM_CalibReq_A_SIGNAL_SIZE    1U
#define LIN_LI0_ECM_CalibReq_A_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_ECM_CalibReq_A_FLAG_BIT_OFFSET    1U


#define LIN_LI0_ECM_IgStatusReq_A_BYTE_OFFSET    81U
#define LIN_LI0_ECM_IgStatusReq_A_BIT_OFFSET    2U
#define LIN_LI0_ECM_IgStatusReq_A_SIGNAL_SIZE    1U
#define LIN_LI0_ECM_IgStatusReq_A_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_ECM_IgStatusReq_A_FLAG_BIT_OFFSET    2U


#define LIN_LI0_ECM_TargetPosReqIgOff_A_BYTE_OFFSET    82U
#define LIN_LI0_ECM_TargetPosReqIgOff_A_BIT_OFFSET    0U
#define LIN_LI0_ECM_TargetPosReqIgOff_A_SIGNAL_SIZE    8U
#define LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BIT_OFFSET    3U


#define LIN_LI0_AGM_A_ActualPosition_BYTE_OFFSET    84U
#define LIN_LI0_AGM_A_ActualPosition_BIT_OFFSET    0U
#define LIN_LI0_AGM_A_ActualPosition_SIGNAL_SIZE    8U
#define LIN_LI0_AGM_A_ActualPosition_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_ActualPosition_FLAG_BIT_OFFSET    0U


#define LIN_LI0_AGM_A_Err_MechBreak_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_Err_MechBreak_BIT_OFFSET    0U
#define LIN_LI0_AGM_A_Err_MechBreak_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_Err_MechBreak_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_Err_MechBreak_FLAG_BIT_OFFSET    1U


#define LIN_LI0_AGM_A_Err_MechBlock_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_Err_MechBlock_BIT_OFFSET    5U
#define LIN_LI0_AGM_A_Err_MechBlock_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_Err_MechBlock_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_Err_MechBlock_FLAG_BIT_OFFSET    5U


#define LIN_LI0_AGM_A_CalibActive_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_CalibActive_BIT_OFFSET    2U
#define LIN_LI0_AGM_A_CalibActive_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_CalibActive_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_CalibActive_FLAG_BIT_OFFSET    2U


#define LIN_LI0_AGM_A_CalibRequired_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_CalibRequired_BIT_OFFSET    3U
#define LIN_LI0_AGM_A_CalibRequired_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_CalibRequired_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_CalibRequired_FLAG_BIT_OFFSET    3U


#define LIN_LI0_AGM_A_Err_Electrical_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_Err_Electrical_BIT_OFFSET    6U
#define LIN_LI0_AGM_A_Err_Electrical_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_Err_Electrical_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_Err_Electrical_FLAG_BIT_OFFSET    6U


#define LIN_LI0_AGM_A_Err_OverTemp_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_Err_OverTemp_BIT_OFFSET    7U
#define LIN_LI0_AGM_A_Err_OverTemp_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_Err_OverTemp_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_Err_OverTemp_FLAG_BIT_OFFSET    7U


#define LIN_LI0_AGM_A_Err_Voltage_BYTE_OFFSET    85U
#define LIN_LI0_AGM_A_Err_Voltage_BIT_OFFSET    4U
#define LIN_LI0_AGM_A_Err_Voltage_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_Err_Voltage_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_AGM_A_Err_Voltage_FLAG_BIT_OFFSET    4U


#define LIN_LI0_AGM_A_Err_LINResp_BYTE_OFFSET    86U
#define LIN_LI0_AGM_A_Err_LINResp_BIT_OFFSET    0U
#define LIN_LI0_AGM_A_Err_LINResp_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_A_Err_LINResp_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_AGM_A_Err_LINResp_FLAG_BIT_OFFSET    0U


#define LIN_LI0_ECM_TargetPosReqIgOn_B_BYTE_OFFSET    88U
#define LIN_LI0_ECM_TargetPosReqIgOn_B_BIT_OFFSET    0U
#define LIN_LI0_ECM_TargetPosReqIgOn_B_SIGNAL_SIZE    8U
#define LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BIT_OFFSET    0U


#define LIN_LI0_ECM_CalibReq_B_BYTE_OFFSET    89U
#define LIN_LI0_ECM_CalibReq_B_BIT_OFFSET    0U
#define LIN_LI0_ECM_CalibReq_B_SIGNAL_SIZE    1U
#define LIN_LI0_ECM_CalibReq_B_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_ECM_CalibReq_B_FLAG_BIT_OFFSET    1U


#define LIN_LI0_ECM_IgStatusReq_B_BYTE_OFFSET    89U
#define LIN_LI0_ECM_IgStatusReq_B_BIT_OFFSET    2U
#define LIN_LI0_ECM_IgStatusReq_B_SIGNAL_SIZE    1U
#define LIN_LI0_ECM_IgStatusReq_B_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_ECM_IgStatusReq_B_FLAG_BIT_OFFSET    2U


#define LIN_LI0_ECM_TargetPosReqIgOff_B_BYTE_OFFSET    90U
#define LIN_LI0_ECM_TargetPosReqIgOff_B_BIT_OFFSET    0U
#define LIN_LI0_ECM_TargetPosReqIgOff_B_SIGNAL_SIZE    8U
#define LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BIT_OFFSET    3U


#define LIN_LI0_AGM_B_ActualPosition_BYTE_OFFSET    92U
#define LIN_LI0_AGM_B_ActualPosition_BIT_OFFSET    0U
#define LIN_LI0_AGM_B_ActualPosition_SIGNAL_SIZE    8U
#define LIN_LI0_AGM_B_ActualPosition_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_ActualPosition_FLAG_BIT_OFFSET    0U


#define LIN_LI0_AGM_B_Err_MechBreak_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_Err_MechBreak_BIT_OFFSET    0U
#define LIN_LI0_AGM_B_Err_MechBreak_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_Err_MechBreak_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_Err_MechBreak_FLAG_BIT_OFFSET    1U


#define LIN_LI0_AGM_B_Err_MechBlock_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_Err_MechBlock_BIT_OFFSET    5U
#define LIN_LI0_AGM_B_Err_MechBlock_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_Err_MechBlock_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_Err_MechBlock_FLAG_BIT_OFFSET    5U


#define LIN_LI0_AGM_B_CalibActive_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_CalibActive_BIT_OFFSET    2U
#define LIN_LI0_AGM_B_CalibActive_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_CalibActive_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_CalibActive_FLAG_BIT_OFFSET    2U


#define LIN_LI0_AGM_B_CalibRequired_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_CalibRequired_BIT_OFFSET    3U
#define LIN_LI0_AGM_B_CalibRequired_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_CalibRequired_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_CalibRequired_FLAG_BIT_OFFSET    3U


#define LIN_LI0_AGM_B_Err_Electrical_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_Err_Electrical_BIT_OFFSET    6U
#define LIN_LI0_AGM_B_Err_Electrical_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_Err_Electrical_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_Err_Electrical_FLAG_BIT_OFFSET    6U


#define LIN_LI0_AGM_B_Err_OverTemp_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_Err_OverTemp_BIT_OFFSET    7U
#define LIN_LI0_AGM_B_Err_OverTemp_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_Err_OverTemp_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_Err_OverTemp_FLAG_BIT_OFFSET    7U


#define LIN_LI0_AGM_B_Err_Voltage_BYTE_OFFSET    93U
#define LIN_LI0_AGM_B_Err_Voltage_BIT_OFFSET    4U
#define LIN_LI0_AGM_B_Err_Voltage_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_Err_Voltage_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_AGM_B_Err_Voltage_FLAG_BIT_OFFSET    4U


#define LIN_LI0_AGM_B_Err_LINResp_BYTE_OFFSET    94U
#define LIN_LI0_AGM_B_Err_LINResp_BIT_OFFSET    0U
#define LIN_LI0_AGM_B_Err_LINResp_SIGNAL_SIZE    1U
#define LIN_LI0_AGM_B_Err_LINResp_FLAG_BYTE_OFFSET    15U
#define LIN_LI0_AGM_B_Err_LINResp_FLAG_BIT_OFFSET    0U



/**********************************************************************/
/***************        Static API Functions        *******************/
/**********************************************************************/
/*
 * the static signal access macros
 */


 
/* static access macros for signal LI0_BDC_1_ReqMovePos */
 
#define l_u8_rd_LI0_BDC_1_ReqMovePos() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_1_ReqMovePos_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BDC_1_ReqMovePos(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_1_ReqMovePos_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_1_ReqMovePos_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_ReqMovePos_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BDC_1_RespPos */
 
#define l_u8_rd_LI0_BDC_1_RespPos() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_1_RespPos_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BDC_1_RespPos(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_1_RespPos_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_1_RespPos_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_RespPos_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BDC_1_MotorStatus */

 
#define l_bool_rd_LI0_BDC_1_MotorStatus() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_BDC_1_MotorStatus_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_1_MotorStatus(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_BDC_1_MotorStatus_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_BDC_1_MotorStatus_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_MotorStatus_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BDC_1_TempWarn */

 
#define l_bool_rd_LI0_BDC_1_TempWarn() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_TempWarn_BYTE_OFFSET], \
    LIN_LI0_BDC_1_TempWarn_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_1_TempWarn(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_TempWarn_BYTE_OFFSET], \
    LIN_LI0_BDC_1_TempWarn_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_TempWarn_BYTE_OFFSET], \
    LIN_LI0_BDC_1_TempWarn_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_TempWarn_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BDC_1_MoveEnable */

 
#define l_bool_rd_LI0_BDC_1_MoveEnable() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BDC_1_MoveEnable_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_1_MoveEnable(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BDC_1_MoveEnable_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BDC_1_MoveEnable_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_MoveEnable_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_BDC_1_voltageErr */
 
#define l_u8_rd_LI0_BDC_1_voltageErr() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_1_voltageErr_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_BDC_1_voltageErr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_1_voltageErr_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_1_voltageErr_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_voltageErr_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BDC_1_Fault_Signal */
 
#define l_u8_rd_LI0_BDC_1_Fault_Signal() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_1_Fault_Signal_BYTE_OFFSET]) >> 2U) & 0x0fU))


#define l_u8_wr_LI0_BDC_1_Fault_Signal(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_1_Fault_Signal_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_1_Fault_Signal_BYTE_OFFSET] & 0xc3U) | \
    (((A) << 2U) & 0x3cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_Fault_Signal_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BDC_1_Rsp_Comm_Err */

 
#define l_bool_rd_LI0_BDC_1_Rsp_Comm_Err() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_BDC_1_Rsp_Comm_Err_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_1_Rsp_Comm_Err(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_BDC_1_Rsp_Comm_Err_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_1_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_BDC_1_Rsp_Comm_Err_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_BDC_2_ReqMovePos */
 
#define l_u8_rd_LI0_BDC_2_ReqMovePos() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_2_ReqMovePos_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BDC_2_ReqMovePos(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_2_ReqMovePos_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_2_ReqMovePos_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_ReqMovePos_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BDC_2_RespPos */
 
#define l_u8_rd_LI0_BDC_2_RespPos() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_2_RespPos_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BDC_2_RespPos(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_2_RespPos_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_2_RespPos_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_RespPos_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BDC_2_MotorStatus */

 
#define l_bool_rd_LI0_BDC_2_MotorStatus() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_BDC_2_MotorStatus_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_2_MotorStatus(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_BDC_2_MotorStatus_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_BDC_2_MotorStatus_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_MotorStatus_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BDC_2_TempWarn */

 
#define l_bool_rd_LI0_BDC_2_TempWarn() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_TempWarn_BYTE_OFFSET], \
    LIN_LI0_BDC_2_TempWarn_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_2_TempWarn(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_TempWarn_BYTE_OFFSET], \
    LIN_LI0_BDC_2_TempWarn_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_TempWarn_BYTE_OFFSET], \
    LIN_LI0_BDC_2_TempWarn_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_TempWarn_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BDC_2_MoveEnable */

 
#define l_bool_rd_LI0_BDC_2_MoveEnable() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BDC_2_MoveEnable_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_2_MoveEnable(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BDC_2_MoveEnable_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BDC_2_MoveEnable_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_MoveEnable_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_BDC_2_voltageErr */
 
#define l_u8_rd_LI0_BDC_2_voltageErr() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_2_voltageErr_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_BDC_2_voltageErr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_2_voltageErr_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_2_voltageErr_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_voltageErr_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BDC_2_Fault_Signal */
 
#define l_u8_rd_LI0_BDC_2_Fault_Signal() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BDC_2_Fault_Signal_BYTE_OFFSET]) >> 2U) & 0x0fU))


#define l_u8_wr_LI0_BDC_2_Fault_Signal(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BDC_2_Fault_Signal_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BDC_2_Fault_Signal_BYTE_OFFSET] & 0xc3U) | \
    (((A) << 2U) & 0x3cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_Fault_Signal_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BDC_2_Rsp_Comm_Err */

 
#define l_bool_rd_LI0_BDC_2_Rsp_Comm_Err() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_BDC_2_Rsp_Comm_Err_BIT_OFFSET))

#define l_bool_wr_LI0_BDC_2_Rsp_Comm_Err(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_BDC_2_Rsp_Comm_Err_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDC_2_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_BDC_2_Rsp_Comm_Err_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_CCV4_ReqMovePos */

 
#define l_bool_rd_LI0_CCV4_ReqMovePos() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_ReqMovePos_BYTE_OFFSET], \
    LIN_LI0_CCV4_ReqMovePos_BIT_OFFSET))

#define l_bool_wr_LI0_CCV4_ReqMovePos(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_ReqMovePos_BYTE_OFFSET], \
    LIN_LI0_CCV4_ReqMovePos_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_ReqMovePos_BYTE_OFFSET], \
    LIN_LI0_CCV4_ReqMovePos_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_ReqMovePos_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_CCV4_RespPos */
 
#define l_u8_rd_LI0_CCV4_RespPos() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CCV4_RespPos_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_CCV4_RespPos(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CCV4_RespPos_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CCV4_RespPos_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_RespPos_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_CCV4_MotorStatus */

 
#define l_bool_rd_LI0_CCV4_MotorStatus() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_CCV4_MotorStatus_BIT_OFFSET))

#define l_bool_wr_LI0_CCV4_MotorStatus(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_CCV4_MotorStatus_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_MotorStatus_BYTE_OFFSET], \
    LIN_LI0_CCV4_MotorStatus_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_MotorStatus_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_CCV4_TempWarn */

 
#define l_bool_rd_LI0_CCV4_TempWarn() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_TempWarn_BYTE_OFFSET], \
    LIN_LI0_CCV4_TempWarn_BIT_OFFSET))

#define l_bool_wr_LI0_CCV4_TempWarn(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_TempWarn_BYTE_OFFSET], \
    LIN_LI0_CCV4_TempWarn_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_TempWarn_BYTE_OFFSET], \
    LIN_LI0_CCV4_TempWarn_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_TempWarn_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_CCV4_MoveEnable */

 
#define l_bool_rd_LI0_CCV4_MoveEnable() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_CCV4_MoveEnable_BIT_OFFSET))

#define l_bool_wr_LI0_CCV4_MoveEnable(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_CCV4_MoveEnable_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_CCV4_MoveEnable_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_MoveEnable_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_CCV4_voltageErr */
 
#define l_u8_rd_LI0_CCV4_voltageErr() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CCV4_voltageErr_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_CCV4_voltageErr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CCV4_voltageErr_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CCV4_voltageErr_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_voltageErr_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CCV4_Fault_Signal */
 
#define l_u8_rd_LI0_CCV4_Fault_Signal() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CCV4_Fault_Signal_BYTE_OFFSET]) >> 2U) & 0x0fU))


#define l_u8_wr_LI0_CCV4_Fault_Signal(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CCV4_Fault_Signal_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CCV4_Fault_Signal_BYTE_OFFSET] & 0xc3U) | \
    (((A) << 2U) & 0x3cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_Fault_Signal_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_CCV4_Rsp_Comm_Err */

 
#define l_bool_rd_LI0_CCV4_Rsp_Comm_Err() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_CCV4_Rsp_Comm_Err_BIT_OFFSET))

#define l_bool_wr_LI0_CCV4_Rsp_Comm_Err(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_CCV4_Rsp_Comm_Err_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_CCV4_Rsp_Comm_Err_BYTE_OFFSET], \
    LIN_LI0_CCV4_Rsp_Comm_Err_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PositionRequest_EXV2 */
 
#define l_u16_rd_LI0_PositionRequest_EXV2() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PositionRequest_EXV2(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_ATC_4] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_ATC_4] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PositionRequest_EXV2_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_ATC_4] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PositionRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_PositionRequest_EXV2_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EnableRequest_EXV2 */

 
#define l_bool_rd_LI0_EnableRequest_EXV2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EnableRequest_EXV2_BYTE_OFFSET], \
    LIN_LI0_EnableRequest_EXV2_BIT_OFFSET))

#define l_bool_wr_LI0_EnableRequest_EXV2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EnableRequest_EXV2_BYTE_OFFSET], \
    LIN_LI0_EnableRequest_EXV2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EnableRequest_EXV2_BYTE_OFFSET], \
    LIN_LI0_EnableRequest_EXV2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EnableRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_EnableRequest_EXV2_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_InitRequest_EXV2 */
 
#define l_u8_rd_LI0_InitRequest_EXV2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_InitRequest_EXV2_BYTE_OFFSET]) >> 0U) & 0x07U))


#define l_u8_wr_LI0_InitRequest_EXV2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_InitRequest_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_InitRequest_EXV2_BYTE_OFFSET] & 0xf8U) | \
    (((A) << 0U) & 0x07U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_InitRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_InitRequest_EXV2_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_ResponseError_EXV2 */

 
#define l_bool_rd_LI0_ResponseError_EXV2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_ResponseError_EXV2_BYTE_OFFSET], \
    LIN_LI0_ResponseError_EXV2_BIT_OFFSET))

#define l_bool_wr_LI0_ResponseError_EXV2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_ResponseError_EXV2_BYTE_OFFSET], \
    LIN_LI0_ResponseError_EXV2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_ResponseError_EXV2_BYTE_OFFSET], \
    LIN_LI0_ResponseError_EXV2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ResponseError_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_ResponseError_EXV2_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_CurrentInitState_EXV2 */
 
#define l_u8_rd_LI0_CurrentInitState_EXV2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CurrentInitState_EXV2_BYTE_OFFSET]) >> 1U) & 0x03U))


#define l_u8_wr_LI0_CurrentInitState_EXV2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CurrentInitState_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CurrentInitState_EXV2_BYTE_OFFSET] & 0xf9U) | \
    (((A) << 1U) & 0x06U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CurrentInitState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_CurrentInitState_EXV2_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_RunState_EXV2 */

 
#define l_bool_rd_LI0_RunState_EXV2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_RunState_EXV2_BYTE_OFFSET], \
    LIN_LI0_RunState_EXV2_BIT_OFFSET))

#define l_bool_wr_LI0_RunState_EXV2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_RunState_EXV2_BYTE_OFFSET], \
    LIN_LI0_RunState_EXV2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_RunState_EXV2_BYTE_OFFSET], \
    LIN_LI0_RunState_EXV2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RunState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RunState_EXV2_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FaultState_EXV2 */
 
#define l_u8_rd_LI0_FaultState_EXV2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FaultState_EXV2_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_FaultState_EXV2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FaultState_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FaultState_EXV2_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FaultState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FaultState_EXV2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_VoltageState_EXV2 */
 
#define l_u8_rd_LI0_VoltageState_EXV2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_VoltageState_EXV2_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_VoltageState_EXV2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_VoltageState_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_VoltageState_EXV2_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_VoltageState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_VoltageState_EXV2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_TemperatureWarn_EXV2 */
 
#define l_u8_rd_LI0_TemperatureWarn_EXV2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_TemperatureWarn_EXV2_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_TemperatureWarn_EXV2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_TemperatureWarn_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_TemperatureWarn_EXV2_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TemperatureWarn_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_TemperatureWarn_EXV2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CurrentPosition_EXV2 */
 
#define l_u16_rd_LI0_CurrentPosition_EXV2() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_CurrentPosition_EXV2(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_2] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_2] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CurrentPosition_EXV2_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_2] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CurrentPosition_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_CurrentPosition_EXV2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_TMM_EXV_PositionRequest */
 
#define l_u16_rd_LI0_TMM_EXV_PositionRequest() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_TMM_EXV_PositionRequest(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_VCU_EXV] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_VCU_EXV] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_PositionRequest_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_VCU_EXV] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_PositionRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_PositionRequest_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_TMM_EXV_EnableRequest */

 
#define l_bool_rd_LI0_TMM_EXV_EnableRequest() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_EnableRequest_BYTE_OFFSET], \
    LIN_LI0_TMM_EXV_EnableRequest_BIT_OFFSET))

#define l_bool_wr_LI0_TMM_EXV_EnableRequest(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_EnableRequest_BYTE_OFFSET], \
    LIN_LI0_TMM_EXV_EnableRequest_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_EnableRequest_BYTE_OFFSET], \
    LIN_LI0_TMM_EXV_EnableRequest_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_EnableRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_EnableRequest_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_TMM_EXV_initRequest */
 
#define l_u8_rd_LI0_TMM_EXV_initRequest() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_initRequest_BYTE_OFFSET]) >> 0U) & 0x07U))


#define l_u8_wr_LI0_TMM_EXV_initRequest(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_initRequest_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_TMM_EXV_initRequest_BYTE_OFFSET] & 0xf8U) | \
    (((A) << 0U) & 0x07U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_initRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_initRequest_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EXV_ResponseError */

 
#define l_bool_rd_LI0_EXV_ResponseError() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV_ResponseError_BYTE_OFFSET], \
    LIN_LI0_EXV_ResponseError_BIT_OFFSET))

#define l_bool_wr_LI0_EXV_ResponseError(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV_ResponseError_BYTE_OFFSET], \
    LIN_LI0_EXV_ResponseError_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV_ResponseError_BYTE_OFFSET], \
    LIN_LI0_EXV_ResponseError_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_ResponseError_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_EXV_CurrentInitState */
 
#define l_u8_rd_LI0_EXV_CurrentInitState() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentInitState_BYTE_OFFSET]) >> 1U) & 0x03U))


#define l_u8_wr_LI0_EXV_CurrentInitState(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentInitState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentInitState_BYTE_OFFSET] & 0xf9U) | \
    (((A) << 1U) & 0x06U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_CurrentInitState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_CurrentInitState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EXV_RunState */

 
#define l_bool_rd_LI0_EXV_RunState() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV_RunState_BYTE_OFFSET], \
    LIN_LI0_EXV_RunState_BIT_OFFSET))

#define l_bool_wr_LI0_EXV_RunState(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV_RunState_BYTE_OFFSET], \
    LIN_LI0_EXV_RunState_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV_RunState_BYTE_OFFSET], \
    LIN_LI0_EXV_RunState_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_RunState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_RunState_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_EXV_FaultState */
 
#define l_u8_rd_LI0_EXV_FaultState() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV_FaultState_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_EXV_FaultState(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV_FaultState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV_FaultState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_FaultState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_FaultState_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV_VoltageState */
 
#define l_u8_rd_LI0_EXV_VoltageState() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV_VoltageState_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_EXV_VoltageState(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV_VoltageState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV_VoltageState_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_VoltageState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_VoltageState_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV_TemperatureWarn */
 
#define l_u8_rd_LI0_EXV_TemperatureWarn() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV_TemperatureWarn_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_EXV_TemperatureWarn(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV_TemperatureWarn_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV_TemperatureWarn_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_TemperatureWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_TemperatureWarn_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV_CurrentPosition */
 
#define l_u16_rd_LI0_EXV_CurrentPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV_CurrentPosition(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_VCU] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_VCU] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV_CurrentPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_VCU] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_CurrentPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_CurrentPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_ECM_TargetPosReqIgOn_A */
 
#define l_u8_rd_LI0_ECM_TargetPosReqIgOn_A() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOn_A_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_ECM_TargetPosReqIgOn_A(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOn_A_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOn_A_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_ECM_CalibReq_A */

 
#define l_bool_rd_LI0_ECM_CalibReq_A() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_CalibReq_A_BYTE_OFFSET], \
    LIN_LI0_ECM_CalibReq_A_BIT_OFFSET))

#define l_bool_wr_LI0_ECM_CalibReq_A(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_CalibReq_A_BYTE_OFFSET], \
    LIN_LI0_ECM_CalibReq_A_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_CalibReq_A_BYTE_OFFSET], \
    LIN_LI0_ECM_CalibReq_A_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_CalibReq_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_CalibReq_A_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_ECM_IgStatusReq_A */

 
#define l_bool_rd_LI0_ECM_IgStatusReq_A() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_IgStatusReq_A_BYTE_OFFSET], \
    LIN_LI0_ECM_IgStatusReq_A_BIT_OFFSET))

#define l_bool_wr_LI0_ECM_IgStatusReq_A(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_IgStatusReq_A_BYTE_OFFSET], \
    LIN_LI0_ECM_IgStatusReq_A_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_IgStatusReq_A_BYTE_OFFSET], \
    LIN_LI0_ECM_IgStatusReq_A_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_IgStatusReq_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_IgStatusReq_A_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_ECM_TargetPosReqIgOff_A */
 
#define l_u8_rd_LI0_ECM_TargetPosReqIgOff_A() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOff_A_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_ECM_TargetPosReqIgOff_A(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOff_A_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOff_A_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_AGM_A_ActualPosition */
 
#define l_u8_rd_LI0_AGM_A_ActualPosition() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_AGM_A_ActualPosition_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_AGM_A_ActualPosition(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_AGM_A_ActualPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_AGM_A_ActualPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_ActualPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_ActualPosition_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_AGM_A_Err_MechBreak */

 
#define l_bool_rd_LI0_AGM_A_Err_MechBreak() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_MechBreak_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_MechBreak_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_Err_MechBreak(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_MechBreak_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_MechBreak_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_MechBreak_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_MechBreak_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_MechBreak_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_MechBreak_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_Err_MechBlock */

 
#define l_bool_rd_LI0_AGM_A_Err_MechBlock() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_MechBlock_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_MechBlock_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_Err_MechBlock(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_MechBlock_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_MechBlock_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_MechBlock_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_MechBlock_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_MechBlock_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_MechBlock_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_CalibActive */

 
#define l_bool_rd_LI0_AGM_A_CalibActive() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_CalibActive_BYTE_OFFSET], \
    LIN_LI0_AGM_A_CalibActive_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_CalibActive(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_CalibActive_BYTE_OFFSET], \
    LIN_LI0_AGM_A_CalibActive_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_CalibActive_BYTE_OFFSET], \
    LIN_LI0_AGM_A_CalibActive_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_CalibActive_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_CalibActive_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_CalibRequired */

 
#define l_bool_rd_LI0_AGM_A_CalibRequired() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_CalibRequired_BYTE_OFFSET], \
    LIN_LI0_AGM_A_CalibRequired_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_CalibRequired(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_CalibRequired_BYTE_OFFSET], \
    LIN_LI0_AGM_A_CalibRequired_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_CalibRequired_BYTE_OFFSET], \
    LIN_LI0_AGM_A_CalibRequired_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_CalibRequired_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_CalibRequired_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_Err_Electrical */

 
#define l_bool_rd_LI0_AGM_A_Err_Electrical() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_Electrical_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_Electrical_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_Err_Electrical(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_Electrical_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_Electrical_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_Electrical_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_Electrical_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_Electrical_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_Electrical_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_Err_OverTemp */

 
#define l_bool_rd_LI0_AGM_A_Err_OverTemp() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_OverTemp_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_OverTemp_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_Err_OverTemp(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_OverTemp_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_OverTemp_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_OverTemp_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_OverTemp_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_OverTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_OverTemp_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_Err_Voltage */

 
#define l_bool_rd_LI0_AGM_A_Err_Voltage() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_Voltage_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_Voltage_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_Err_Voltage(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_Voltage_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_Voltage_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_Voltage_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_Voltage_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_Voltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_Voltage_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_A_Err_LINResp */

 
#define l_bool_rd_LI0_AGM_A_Err_LINResp() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_LINResp_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_LINResp_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_A_Err_LINResp(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_LINResp_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_LINResp_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_A_Err_LINResp_BYTE_OFFSET], \
    LIN_LI0_AGM_A_Err_LINResp_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_LINResp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_LINResp_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_ECM_TargetPosReqIgOn_B */
 
#define l_u8_rd_LI0_ECM_TargetPosReqIgOn_B() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOn_B_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_ECM_TargetPosReqIgOn_B(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOn_B_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOn_B_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_ECM_CalibReq_B */

 
#define l_bool_rd_LI0_ECM_CalibReq_B() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_CalibReq_B_BYTE_OFFSET], \
    LIN_LI0_ECM_CalibReq_B_BIT_OFFSET))

#define l_bool_wr_LI0_ECM_CalibReq_B(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_CalibReq_B_BYTE_OFFSET], \
    LIN_LI0_ECM_CalibReq_B_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_CalibReq_B_BYTE_OFFSET], \
    LIN_LI0_ECM_CalibReq_B_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_CalibReq_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_CalibReq_B_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_ECM_IgStatusReq_B */

 
#define l_bool_rd_LI0_ECM_IgStatusReq_B() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_IgStatusReq_B_BYTE_OFFSET], \
    LIN_LI0_ECM_IgStatusReq_B_BIT_OFFSET))

#define l_bool_wr_LI0_ECM_IgStatusReq_B(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_IgStatusReq_B_BYTE_OFFSET], \
    LIN_LI0_ECM_IgStatusReq_B_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_ECM_IgStatusReq_B_BYTE_OFFSET], \
    LIN_LI0_ECM_IgStatusReq_B_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_IgStatusReq_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_IgStatusReq_B_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_ECM_TargetPosReqIgOff_B */
 
#define l_u8_rd_LI0_ECM_TargetPosReqIgOff_B() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOff_B_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_ECM_TargetPosReqIgOff_B(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOff_B_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_ECM_TargetPosReqIgOff_B_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_AGM_B_ActualPosition */
 
#define l_u8_rd_LI0_AGM_B_ActualPosition() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_AGM_B_ActualPosition_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_AGM_B_ActualPosition(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_AGM_B_ActualPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_AGM_B_ActualPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_ActualPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_ActualPosition_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_AGM_B_Err_MechBreak */

 
#define l_bool_rd_LI0_AGM_B_Err_MechBreak() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_MechBreak_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_MechBreak_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_Err_MechBreak(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_MechBreak_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_MechBreak_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_MechBreak_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_MechBreak_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_MechBreak_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_MechBreak_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_Err_MechBlock */

 
#define l_bool_rd_LI0_AGM_B_Err_MechBlock() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_MechBlock_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_MechBlock_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_Err_MechBlock(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_MechBlock_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_MechBlock_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_MechBlock_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_MechBlock_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_MechBlock_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_MechBlock_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_CalibActive */

 
#define l_bool_rd_LI0_AGM_B_CalibActive() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_CalibActive_BYTE_OFFSET], \
    LIN_LI0_AGM_B_CalibActive_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_CalibActive(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_CalibActive_BYTE_OFFSET], \
    LIN_LI0_AGM_B_CalibActive_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_CalibActive_BYTE_OFFSET], \
    LIN_LI0_AGM_B_CalibActive_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_CalibActive_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_CalibActive_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_CalibRequired */

 
#define l_bool_rd_LI0_AGM_B_CalibRequired() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_CalibRequired_BYTE_OFFSET], \
    LIN_LI0_AGM_B_CalibRequired_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_CalibRequired(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_CalibRequired_BYTE_OFFSET], \
    LIN_LI0_AGM_B_CalibRequired_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_CalibRequired_BYTE_OFFSET], \
    LIN_LI0_AGM_B_CalibRequired_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_CalibRequired_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_CalibRequired_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_Err_Electrical */

 
#define l_bool_rd_LI0_AGM_B_Err_Electrical() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_Electrical_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_Electrical_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_Err_Electrical(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_Electrical_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_Electrical_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_Electrical_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_Electrical_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_Electrical_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_Electrical_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_Err_OverTemp */

 
#define l_bool_rd_LI0_AGM_B_Err_OverTemp() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_OverTemp_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_OverTemp_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_Err_OverTemp(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_OverTemp_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_OverTemp_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_OverTemp_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_OverTemp_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_OverTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_OverTemp_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_Err_Voltage */

 
#define l_bool_rd_LI0_AGM_B_Err_Voltage() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_Voltage_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_Voltage_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_Err_Voltage(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_Voltage_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_Voltage_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_Voltage_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_Voltage_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_Voltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_Voltage_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_AGM_B_Err_LINResp */

 
#define l_bool_rd_LI0_AGM_B_Err_LINResp() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_LINResp_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_LINResp_BIT_OFFSET))

#define l_bool_wr_LI0_AGM_B_Err_LINResp(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_LINResp_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_LINResp_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_AGM_B_Err_LINResp_BYTE_OFFSET], \
    LIN_LI0_AGM_B_Err_LINResp_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_LINResp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_LINResp_FLAG_BIT_OFFSET);}


/* Signal flag APIs */

#define l_flg_tst_LI0_BDC_1_ReqMovePos_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_ReqMovePos_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_ReqMovePos_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_ReqMovePos_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_RespPos_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_RespPos_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_RespPos_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_RespPos_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_MotorStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_MotorStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_MotorStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_MotorStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_TempWarn_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_TempWarn_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_TempWarn_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_TempWarn_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_MoveEnable_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_MoveEnable_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_MoveEnable_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_MoveEnable_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_voltageErr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_voltageErr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_voltageErr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_voltageErr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_Fault_Signal_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_Fault_Signal_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_Fault_Signal_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_Fault_Signal_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_1_Rsp_Comm_Err_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_1_Rsp_Comm_Err_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_1_Rsp_Comm_Err_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_ReqMovePos_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_ReqMovePos_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_ReqMovePos_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_ReqMovePos_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_RespPos_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_RespPos_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_RespPos_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_RespPos_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_MotorStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_MotorStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_MotorStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_MotorStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_TempWarn_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_TempWarn_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_TempWarn_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_TempWarn_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_MoveEnable_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_MoveEnable_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_MoveEnable_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_MoveEnable_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_voltageErr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_voltageErr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_voltageErr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_voltageErr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_Fault_Signal_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_Fault_Signal_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_Fault_Signal_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_Fault_Signal_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDC_2_Rsp_Comm_Err_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDC_2_Rsp_Comm_Err_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDC_2_Rsp_Comm_Err_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_ReqMovePos_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_ReqMovePos_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_ReqMovePos_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_ReqMovePos_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_ReqMovePos_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_RespPos_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_RespPos_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_RespPos_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_RespPos_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_RespPos_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_MotorStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_MotorStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_MotorStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_MotorStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_MotorStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_TempWarn_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_TempWarn_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_TempWarn_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_TempWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_TempWarn_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_MoveEnable_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_MoveEnable_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_MoveEnable_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_MoveEnable_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_voltageErr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_voltageErr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_voltageErr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_voltageErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_voltageErr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_Fault_Signal_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_Fault_Signal_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_Fault_Signal_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_Fault_Signal_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_Fault_Signal_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CCV4_Rsp_Comm_Err_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CCV4_Rsp_Comm_Err_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BYTE_OFFSET],\
         LIN_LI0_CCV4_Rsp_Comm_Err_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PositionRequest_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PositionRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_PositionRequest_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PositionRequest_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PositionRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_PositionRequest_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EnableRequest_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EnableRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_EnableRequest_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EnableRequest_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EnableRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_EnableRequest_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_InitRequest_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_InitRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_InitRequest_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_InitRequest_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_InitRequest_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_InitRequest_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ResponseError_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ResponseError_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_ResponseError_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ResponseError_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ResponseError_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_ResponseError_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CurrentInitState_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CurrentInitState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_CurrentInitState_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CurrentInitState_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CurrentInitState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_CurrentInitState_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RunState_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RunState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RunState_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RunState_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RunState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RunState_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FaultState_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FaultState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FaultState_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FaultState_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FaultState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FaultState_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_VoltageState_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_VoltageState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_VoltageState_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_VoltageState_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_VoltageState_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_VoltageState_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_TemperatureWarn_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_TemperatureWarn_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_TemperatureWarn_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_TemperatureWarn_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TemperatureWarn_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_TemperatureWarn_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CurrentPosition_EXV2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CurrentPosition_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_CurrentPosition_EXV2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CurrentPosition_EXV2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CurrentPosition_EXV2_FLAG_BYTE_OFFSET],\
         LIN_LI0_CurrentPosition_EXV2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_TMM_EXV_PositionRequest_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_PositionRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_PositionRequest_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_TMM_EXV_PositionRequest_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_PositionRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_PositionRequest_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_TMM_EXV_EnableRequest_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_EnableRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_EnableRequest_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_TMM_EXV_EnableRequest_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_EnableRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_EnableRequest_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_TMM_EXV_initRequest_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_initRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_initRequest_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_TMM_EXV_initRequest_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TMM_EXV_initRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_TMM_EXV_initRequest_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_ResponseError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_ResponseError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_ResponseError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_ResponseError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_CurrentInitState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_CurrentInitState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_CurrentInitState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_CurrentInitState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_CurrentInitState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_CurrentInitState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_RunState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_RunState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_RunState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_RunState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_RunState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_RunState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_FaultState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_FaultState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_FaultState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_FaultState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_FaultState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_FaultState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_VoltageState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_VoltageState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_VoltageState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_VoltageState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_VoltageState_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_VoltageState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_TemperatureWarn_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_TemperatureWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_TemperatureWarn_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_TemperatureWarn_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_TemperatureWarn_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_TemperatureWarn_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV_CurrentPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_CurrentPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_CurrentPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV_CurrentPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV_CurrentPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV_CurrentPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_TargetPosReqIgOn_A_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_TargetPosReqIgOn_A_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOn_A_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_CalibReq_A_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_CalibReq_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_CalibReq_A_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_CalibReq_A_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_CalibReq_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_CalibReq_A_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_IgStatusReq_A_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_IgStatusReq_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_IgStatusReq_A_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_IgStatusReq_A_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_IgStatusReq_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_IgStatusReq_A_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_TargetPosReqIgOff_A_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_TargetPosReqIgOff_A_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOff_A_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_ActualPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_ActualPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_ActualPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_ActualPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_ActualPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_ActualPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_Err_MechBreak_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_MechBreak_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_MechBreak_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_Err_MechBreak_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_MechBreak_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_MechBreak_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_Err_MechBlock_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_MechBlock_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_MechBlock_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_Err_MechBlock_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_MechBlock_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_MechBlock_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_CalibActive_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_CalibActive_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_CalibActive_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_CalibActive_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_CalibActive_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_CalibActive_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_CalibRequired_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_CalibRequired_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_CalibRequired_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_CalibRequired_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_CalibRequired_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_CalibRequired_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_Err_Electrical_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_Electrical_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_Electrical_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_Err_Electrical_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_Electrical_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_Electrical_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_Err_OverTemp_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_OverTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_OverTemp_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_Err_OverTemp_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_OverTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_OverTemp_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_Err_Voltage_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_Voltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_Voltage_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_Err_Voltage_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_Voltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_Voltage_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_A_Err_LINResp_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_LINResp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_LINResp_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_A_Err_LINResp_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_A_Err_LINResp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_A_Err_LINResp_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_TargetPosReqIgOn_B_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_TargetPosReqIgOn_B_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOn_B_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_CalibReq_B_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_CalibReq_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_CalibReq_B_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_CalibReq_B_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_CalibReq_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_CalibReq_B_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_IgStatusReq_B_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_IgStatusReq_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_IgStatusReq_B_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_IgStatusReq_B_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_IgStatusReq_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_IgStatusReq_B_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_ECM_TargetPosReqIgOff_B_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_ECM_TargetPosReqIgOff_B_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BYTE_OFFSET],\
         LIN_LI0_ECM_TargetPosReqIgOff_B_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_ActualPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_ActualPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_ActualPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_ActualPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_ActualPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_ActualPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_Err_MechBreak_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_MechBreak_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_MechBreak_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_Err_MechBreak_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_MechBreak_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_MechBreak_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_Err_MechBlock_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_MechBlock_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_MechBlock_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_Err_MechBlock_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_MechBlock_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_MechBlock_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_CalibActive_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_CalibActive_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_CalibActive_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_CalibActive_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_CalibActive_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_CalibActive_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_CalibRequired_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_CalibRequired_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_CalibRequired_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_CalibRequired_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_CalibRequired_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_CalibRequired_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_Err_Electrical_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_Electrical_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_Electrical_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_Err_Electrical_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_Electrical_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_Electrical_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_Err_OverTemp_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_OverTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_OverTemp_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_Err_OverTemp_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_OverTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_OverTemp_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_Err_Voltage_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_Voltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_Voltage_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_Err_Voltage_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_Voltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_Voltage_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_AGM_B_Err_LINResp_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_LINResp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_LINResp_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_AGM_B_Err_LINResp_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_AGM_B_Err_LINResp_FLAG_BYTE_OFFSET],\
         LIN_LI0_AGM_B_Err_LINResp_FLAG_BIT_OFFSET)



/* Frame flag APIs */

   /* Interface_name = LI0 */

 #define l_flg_tst_LI0_BDC_1_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_1_Cmd]
 #define l_flg_clr_LI0_BDC_1_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_1_Cmd] = 0

 #define l_flg_tst_LI0_BDC_1_Rsp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_1_Rsp]
 #define l_flg_clr_LI0_BDC_1_Rsp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_1_Rsp] = 0

 #define l_flg_tst_LI0_BDC_2_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_2_Cmd]
 #define l_flg_clr_LI0_BDC_2_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_2_Cmd] = 0

 #define l_flg_tst_LI0_BDC_2_Rsp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_2_Rsp]
 #define l_flg_clr_LI0_BDC_2_Rsp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BDC_2_Rsp] = 0

 #define l_flg_tst_LI0_CCV4_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_CCV4_Cmd]
 #define l_flg_clr_LI0_CCV4_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_CCV4_Cmd] = 0

 #define l_flg_tst_LI0_CCV4_Rsq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_CCV4_Rsq]
 #define l_flg_clr_LI0_CCV4_Rsq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_CCV4_Rsq] = 0

 #define l_flg_tst_LI0_ATC_4_flag() \
          g_lin_frame_flag_handle_tbl[LI0_ATC_4]
 #define l_flg_clr_LI0_ATC_4_flag() \
          g_lin_frame_flag_handle_tbl[LI0_ATC_4] = 0

 #define l_flg_tst_LI0_EXV_2_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_2]
 #define l_flg_clr_LI0_EXV_2_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_2] = 0

 #define l_flg_tst_LI0_VCU_EXV_flag() \
          g_lin_frame_flag_handle_tbl[LI0_VCU_EXV]
 #define l_flg_clr_LI0_VCU_EXV_flag() \
          g_lin_frame_flag_handle_tbl[LI0_VCU_EXV] = 0

 #define l_flg_tst_LI0_EXV_VCU_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_VCU]
 #define l_flg_clr_LI0_EXV_VCU_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_VCU] = 0

 #define l_flg_tst_LI0_ECM_AGM_A_DEMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_ECM_AGM_A_DEMAND]
 #define l_flg_clr_LI0_ECM_AGM_A_DEMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_ECM_AGM_A_DEMAND] = 0

 #define l_flg_tst_LI0_AGM_A_ECM_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_AGM_A_ECM_STATUS]
 #define l_flg_clr_LI0_AGM_A_ECM_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_AGM_A_ECM_STATUS] = 0

 #define l_flg_tst_LI0_ECM_AGM_B_DEMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_ECM_AGM_B_DEMAND]
 #define l_flg_clr_LI0_ECM_AGM_B_DEMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_ECM_AGM_B_DEMAND] = 0

 #define l_flg_tst_LI0_AGM_B_ECM_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_AGM_B_ECM_STATUS]
 #define l_flg_clr_LI0_AGM_B_ECM_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_AGM_B_ECM_STATUS] = 0

 #define l_flg_tst_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq]
 #define l_flg_clr_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq] = 0

 #define l_flg_tst_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp]
 #define l_flg_clr_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp] = 0


/* SCHEDULE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_sch_tick_interface
 * Description   : This static function call to dynamic function l_sch_tick()
 *
 * Implements    : l_sch_tick_interface_Class
 *END**************************************************************************/

#define l_sch_tick_LI0() l_sch_tick(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_sch_set_interface
 * Description   : This static function call to dynamic function l_sch_set()
 *
 * Implements    : l_sch_set_interface_Class
 *END**************************************************************************/

#define l_sch_set_LI0(schedule, entry) l_sch_set(LI0, schedule, entry)

/* INTERFACE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_init_interface
 * Description   : This static function call to dynamic function l_ifc_init()
 *
 * Implements    : l_ifc_init_interface_Class
 *END**************************************************************************/

#define l_ifc_init_LI0() l_ifc_init(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_goto_sleep_interface
 * Description   : This static function call to dynamic function l_ifc_goto_sleep()
 *
 * Implements    : l_ifc_goto_sleep_interface_Class
 *END**************************************************************************/

#define l_ifc_goto_sleep_LI0() l_ifc_goto_sleep(LI0)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_wake_up_interface
 * Description   : This static function call to dynamic function l_ifc_wake_up()
 *
 * Implements    : l_ifc_wake_up_interface_Class
 *END**************************************************************************/

#define l_ifc_wake_up_LI0() l_ifc_wake_up(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_read_status_interface
 * Description   : This static function call to dynamic function l_ifc_read_status()
 *
 * Implements    : l_ifc_read_status_interface_Class
 *END**************************************************************************/

#define l_ifc_read_status_LI0() l_ifc_read_status(LI0)





#define LI0_DIAG_NUMBER_OF_SERVICES     5U

#define LI0_DIAGSRV_ASSIGN_NAD_ORDER       0U
#define LI0_DIAGSRV_READ_BY_IDENTIFIER_ORDER       1U
#define LI0_DIAGSRV_CONDITIONAL_CHANGE_NAD_ORDER       2U
#define LI0_DIAGSRV_SAVE_CONFIGURATION_ORDER       3U
#define LI0_DIAGSRV_ASSIGN_FRAME_ID_RANGE_ORDER       4U

#define MAX_LENGTH_SERVICE 6




#endif    /* _LIN_CFG_H_ */
